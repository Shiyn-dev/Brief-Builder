import jsPDF from "jspdf"

interface BriefData {
  type: "landing" | "logo" | "presentation"
  [key: string]: any
}

export function generatePDF(briefData: BriefData): void {
  const doc = new jsPDF()

  // Set font
  doc.setFont("helvetica")

  // Header
  doc.setFontSize(20)
  doc.setTextColor(0, 128, 128) // Teal color
  doc.text("BRIEF BUILDER", 20, 30)

  // Title
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  const title = `Brief for the ${briefData.type.charAt(0).toUpperCase() + briefData.type.slice(1)}:`
  doc.text(title, 20, 50)

  const yPosition = 70

  if (briefData.type === "landing") {
    generateLandingPDF(doc, briefData, yPosition)
  } else if (briefData.type === "logo") {
    generateLogoPDF(doc, briefData, yPosition)
  } else if (briefData.type === "presentation") {
    generatePresentationPDF(doc, briefData, yPosition)
  }

  // Footer
  doc.setFontSize(10)
  doc.setTextColor(128, 128, 128)
  doc.text("Generated by Brief Builder", 20, 280)
  doc.text(new Date().toLocaleDateString(), 150, 280)

  // Save the PDF
  doc.save(`${briefData.type}-brief.pdf`)
}

function generateLandingPDF(doc: jsPDF, data: any, startY: number): void {
  doc.setFontSize(12)
  doc.setTextColor(0, 0, 0)

  const fields = [
    { label: "Company Name", value: data.companyName },
    { label: "Activity Field", value: data.activityField },
    { label: "Company Mission", value: data.companyMission },
    { label: "USP", value: data.usp },
    { label: "Goal", value: data.goal },
    { label: "Current Landing Link", value: data.currentLandingLink },
    { label: "Purpose", value: data.purpose },
    { label: "Why Buy From You", value: data.whyBuyFromYou },
    { label: "Main Audience", value: data.audience },
    { label: "Main Competitor", value: data.mainCompetitor },
    { label: "Color Scheme", value: data.colorScheme },
    {
      label: "Landing Blocks",
      value: Array.isArray(data.landingBlocks) ? data.landingBlocks.join(", ") : data.landingBlocks,
    },
    { label: "Style", value: data.style },
    { label: "Content", value: data.content },
  ]

  let yPos = startY

  fields.forEach((field) => {
    if (field.value && field.value.trim() !== "") {
      doc.setFont("helvetica", "bold")
      doc.text(`${field.label}:`, 20, yPos)
      doc.setFont("helvetica", "normal")

      const lines = doc.splitTextToSize(field.value, 170)
      doc.text(lines, 20, yPos + 10)
      yPos += 10 + lines.length * 5 + 5

      if (yPos > 250) {
        doc.addPage()
        yPos = 30
      }
    }
  })
}

function generateLogoPDF(doc: jsPDF, data: any, startY: number): void {
  doc.setFontSize(12)
  doc.setTextColor(0, 0, 0)

  const fields = [
    { label: "Company Name Type", value: data.companyNameType },
    { label: "Custom Company Name", value: data.customCompanyName },
    { label: "Company Area", value: Array.isArray(data.companyArea) ? data.companyArea.join(", ") : data.companyArea },
    { label: "Custom Area", value: data.customArea },
    { label: "Logo Usage", value: Array.isArray(data.logoUsage) ? data.logoUsage.join(", ") : data.logoUsage },
    { label: "Emotions", value: Array.isArray(data.emotions) ? data.emotions.join(", ") : data.emotions },
    { label: "Custom Emotion", value: data.customEmotion },
    { label: "Sensations", value: Array.isArray(data.sensations) ? data.sensations.join(", ") : data.sensations },
    { label: "Custom Sensation", value: data.customSensation },
    { label: "Geometric Figure", value: data.geometricFigure },
    { label: "Custom Figure", value: data.customFigure },
    { label: "Colors", value: Array.isArray(data.colors) ? data.colors.join(", ") : data.colors },
    { label: "Custom Color", value: data.customColor },
    {
      label: "Unacceptable Images",
      value: Array.isArray(data.unacceptableImages) ? data.unacceptableImages.join(", ") : data.unacceptableImages,
    },
    { label: "Custom Unacceptable", value: data.customUnacceptable },
    { label: "Logo Types", value: Array.isArray(data.logoTypes) ? data.logoTypes.join(", ") : data.logoTypes },
  ]

  let yPos = startY

  fields.forEach((field) => {
    if (field.value && field.value.trim() !== "") {
      doc.setFont("helvetica", "bold")
      doc.text(`${field.label}:`, 20, yPos)
      doc.setFont("helvetica", "normal")

      const lines = doc.splitTextToSize(field.value, 170)
      doc.text(lines, 20, yPos + 10)
      yPos += 10 + lines.length * 5 + 5

      if (yPos > 250) {
        doc.addPage()
        yPos = 30
      }
    }
  })
}

function generatePresentationPDF(doc: jsPDF, data: any, startY: number): void {
  // Similar implementation for presentation brief
  doc.setFontSize(12)
  doc.setTextColor(0, 0, 0)

  doc.text("Presentation brief fields will be implemented here", 20, startY)
}
